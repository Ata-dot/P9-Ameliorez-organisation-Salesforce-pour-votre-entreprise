/**
 * @description       : Batch qui met √† jour les prix des produits actifs (PricebookEntry)
 *                      uniquement s'ils ne sont pas li√©s √† une commande activ√©e (OrderItem -> Order.Status = 'Activated').
 *                      Il divise le prix par 10 si le prix est > 0, et active l'utilisation du prix standard.
 *                      Le batch peut √™tre lanc√© manuellement ou programm√© chaque lundi √† minuit.
 * @author            : ChangeMeIn@UserSettingsUnder.SFDoc
 * @group             : 
 * @last modified on  : 05-18-2025
 * @last modified by  : ChangeMeIn@UserSettingsUnder.SFDoc
**/
global class WeeklyProductPriceUpdater implements Database.Batchable<SObject>, Database.Stateful, Schedulable {

    // √âtape 1 : Requ√™te des enregistrements √† traiter
    global Database.QueryLocator start(Database.BatchableContext BC) {
        String query = 
            'SELECT Id, UnitPrice ' +
            'FROM PricebookEntry ' +
            'WHERE IsActive = TRUE ' +
            'AND Id NOT IN (' +
            '    SELECT PricebookEntryId ' +
            '    FROM OrderItem ' +
            '    WHERE Order.Status = \'Activated\'' +
            ')';
        
        System.debug('üîç D√©but du batch - Requ√™te ex√©cut√©e : ' + query);
        return Database.getQueryLocator(query);
    }

    // √âtape 2 : Traitement des enregistrements
    global void execute(Database.BatchableContext BC, List<PricebookEntry> scope) {
        List<PricebookEntry> priceEntriesToUpdate = new List<PricebookEntry>();
        Integer totalAnalyzed = 0;
        Integer totalUpdated = 0;

        for (PricebookEntry entry : scope) {
            totalAnalyzed++;
            System.debug('‚û°Ô∏è Analyse de PricebookEntry : Id=' + entry.Id + ', UnitPrice=' + entry.UnitPrice);

            if (entry.UnitPrice == null || entry.UnitPrice <= 0) {
                System.debug('‚è≠Ô∏è Prix nul ou n√©gatif, ignor√©.');
                continue;
            }

            Decimal newPrice = (entry.UnitPrice + 2).setScale(2, RoundingMode.HALF_UP);

            if (newPrice != entry.UnitPrice) {
                entry.UnitPrice = newPrice;
                entry.UseStandardPrice = false;
                priceEntriesToUpdate.add(entry);
                totalUpdated++;
                System.debug('‚úÖ Nouveau prix appliqu√© : ' + newPrice);
            }
        }

        System.debug('üî¢ Analyse termin√©e : ' + totalAnalyzed + ' entr√©es trait√©es, ' + totalUpdated + ' mises √† jour.');

        if (!priceEntriesToUpdate.isEmpty()) {
            try {
                update priceEntriesToUpdate;
                System.debug('üõ†Ô∏è Mise √† jour r√©ussie de ' + priceEntriesToUpdate.size() + ' entr√©es.');
            } catch (Exception e) {
                System.debug('‚ùå Erreur lors de la mise √† jour : ' + e.getMessage());
            }
        } else {
            System.debug('‚ÑπÔ∏è Aucune mise √† jour n√©cessaire dans ce lot.');
        }
    }

    // √âtape 3 : Fin du batch
    global void finish(Database.BatchableContext BC) {
        System.debug('‚úÖ Batch termin√©.');
    }

    // M√©thode pour planifier automatiquement le batch chaque lundi √† minuit
    public static void scheduleWeeklyJob() {
        String cronExp = '0 0 0 ? * MON';
        System.schedule('Weekly Product Price Update', cronExp, new WeeklyProductPriceUpdater());
        System.debug('üìÖ Batch planifi√© pour s\'ex√©cuter chaque lundi √† minuit.');
    }

    // M√©thode appel√©e par le planificateur (Scheduler)
    global void execute(SchedulableContext sc) {
        System.debug('üöÄ Ex√©cution planifi√©e d√©clench√©e.');
        Database.executeBatch(new WeeklyProductPriceUpdater(), 200);
    }
}
